searchData={"content_type":"text/markdown","items":[{"doc":"Venomous is the main module for managing concurrent Python processes using Erlport in an Elixir application.\n\nThe core concept revolves around \"Snakes\" which represent Python worker processes. These `Venomous.SnakeWorker` are managed and supervised with `Venomous.SnakeManager` GenServer to allow concurrent and efficient execution of Python code. The `Snakes` pids and python pids are stored inside `:ets` table and the Processes are handled by `DymanicSupervisor` called `Venomous.SnakeSupervisor`. The unused `Snakes` get automatically killed by `SnakeManager` depending on the given configuration.","ref":"Venomous.html","title":"Venomous","type":"module"},{"doc":"- `python/2`: The primary function to execute a Python function. It retrieves a Snake (Python worker process) and runs the specified Python function using the arguments provided in a `SnakeArgs` struct. If no ready Snakes are available, a new one is spawned. If max_children is reached it will return an error with appropriate message.\n- `python!/3` | `python!/1`: Will wait until any `Venomous.SnakeWorker` is freed, requesting it with the given interval.","ref":"Venomous.html#module-main-functionality","title":"Main Functionality - Venomous","type":"module"},{"doc":"Venomous consists of several key components:\n\n- `Venomous.SnakeWorker`: Manages the execution of Python processes.\n- `Venomous.SnakeSupervisor`: A DynamicSupervisor that oversees the SnakeWorkers.\n- `Venomous.SnakeManager`: A GenServer that coordinates the SnakeWorkers and handles operations like spawning, retrieval and cleanup.","ref":"Venomous.html#module-architecture","title":"Architecture - Venomous","type":"module"},{"doc":"The behavior and management of Snakes can be configured through the following options:\n\n- `erlport_encoder: %{module: atom(), func: atom(), args: list(any())}`: Optional :erlport encoder/decoder python function for converting types.\n- `snake_ttl_minutes: non_neg_integer()`: Time-to-live for a Snake in minutes. Default is 15 min.\n- `perpetual_workers: non_neg_integer()`: Number of Snakes to keep alive perpetually. Default is 10.\n- `cleaner_interval_ms: non_neg_integer()`: Interval in milliseconds for cleaning up inactive Snakes. Default is 60_000 ms.","ref":"Venomous.html#module-configuration-options","title":"Configuration Options - Venomous","type":"module"},{"doc":"- `list_alive_snakes/0`: Returns a list of :ets table containing currently alive Snakes.\n- `clean_inactive_snakes/0`: Manually clears inactive Snakes depending on their ttl and returns the number of Snakes cleared.\n- `slay_python_worker/1`: Kills a specified Python worker process and its SnakeWorker.","ref":"Venomous.html#module-auxiliary-functions","title":"Auxiliary Functions - Venomous","type":"module"},{"doc":"Clears inactive snakes manually, returns number of snakes cleared","ref":"Venomous.html#clean_inactive_snakes/0","title":"Venomous.clean_inactive_snakes/0","type":"function"},{"doc":"Retrieves x amount of ready snakes. In case of hitting max_children cap, stops and returns all available snakes.","ref":"Venomous.html#get_snakes_ready/1","title":"Venomous.get_snakes_ready/1","type":"function"},{"doc":"- amount of snakes to retrieve","ref":"Venomous.html#get_snakes_ready/1-parameters","title":"Parameters - Venomous.get_snakes_ready/1","type":"function"},{"doc":"- A list of tuples `{pid, pid}`","ref":"Venomous.html#get_snakes_ready/1-returns","title":"Returns - Venomous.get_snakes_ready/1","type":"function"},{"doc":"Returns list of :ets table containing alive snakes","ref":"Venomous.html#list_alive_snakes/0","title":"Venomous.list_alive_snakes/0","type":"function"},{"doc":"Wrapper for python workers\nTries to retrieve SnakeWorker which then runs given function inside given module with args. In case of failure will return {:error, message}.\nIn case :EXIT happens, it will kill python worker/process and exit(:normal)","ref":"Venomous.html#python/2","title":"Venomous.python/2","type":"function"},{"doc":"- %SnakeArgs{} struct of :module, :func, :args \n  - python_timeout \\ @default_timeout non_neg_integer() | :infinity Timeout for python call.\n    In case of timeout it will kill python worker/process and return {error: \"timeout\"}","ref":"Venomous.html#python/2-parameters","title":"Parameters - Venomous.python/2","type":"function"},{"doc":"- any() | {error: \"timeout\"} | {error: any()} retrieves output of python function or error","ref":"Venomous.html#python/2-returns","title":"Returns - Venomous.python/2","type":"function"},{"doc":"If no Snake is available will continue requesting it with the given interval until any gets freed","ref":"Venomous.html#python!/3","title":"Venomous.python!/3","type":"function"},{"doc":"Retrieves ready SnakeWorker and python pids.\nIf all processes are busy and exceeds max_children will return {:retrieve_error, message}.","ref":"Venomous.html#retrieve_snake/0","title":"Venomous.retrieve_snake/0","type":"function"},{"doc":"- A tuple `{pid, pid}` containing the process IDs of the SnakeWorker and python processes. In case of error `{:retrieve_error, message}`","ref":"Venomous.html#retrieve_snake/0-returns","title":"Returns - Venomous.retrieve_snake/0","type":"function"},{"doc":"Retrieves ready SnakeWorker and python pids.\nThe worker is then set to :busy until its ran with snake_run(), preventing it from getting removed automatically or used by other process\nIf all processes are busy and exceeds max_children will wait for interval ms and try again.","ref":"Venomous.html#retrieve_snake!/1","title":"Venomous.retrieve_snake!/1","type":"function"},{"doc":"- interval: The time to wait in milliseconds before retrying. Default is `@wait_for_snake_interval`.","ref":"Venomous.html#retrieve_snake!/1-parameters","title":"Parameters - Venomous.retrieve_snake!/1","type":"function"},{"doc":"- A tuple `{pid, pid}` containing the process IDs of the SnakeWorker and python processes.","ref":"Venomous.html#retrieve_snake!/1-returns","title":"Returns - Venomous.retrieve_snake!/1","type":"function"},{"doc":"Kills python process and its SnakeWorker","ref":"Venomous.html#slay_python_worker/1","title":"Venomous.slay_python_worker/1","type":"function"},{"doc":"- SnakeWorker pid\n  - Python pid","ref":"Venomous.html#slay_python_worker/1-parameters","title":"Parameters - Venomous.slay_python_worker/1","type":"function"},{"doc":":ok","ref":"Venomous.html#slay_python_worker/1-returns","title":"Returns - Venomous.slay_python_worker/1","type":"function"},{"doc":"Runs given %SnakeArgs{} inside given Snake pids.","ref":"Venomous.html#snake_run/3","title":"Venomous.snake_run/3","type":"function"},{"doc":"- %SnakeArgs{} struct of :module, :func, :args \n  - {pid, pypid} tuple containing SnakeWorker pid and python pid\n  - python_timeout \\ @default_timeout non_neg_integer() | :infinity Timeout for python call.\n    In case of timeout it will kill python worker/process and return {error: \"timeout\"}","ref":"Venomous.html#snake_run/3-parameters","title":"Parameters - Venomous.snake_run/3","type":"function"},{"doc":"- any() | {error: \"timeout\"} | %SnakeError{} retrieves output of python function or error","ref":"Venomous.html#snake_run/3-returns","title":"Returns - Venomous.snake_run/3","type":"function"},{"doc":"This module initializes the application supervision tree.\nIt starts the supervisor for managing SnakeManager process with the given Application config.","ref":"Venomous.Application.html","title":"Venomous.Application","type":"module"},{"doc":"","ref":"Venomous.Application.html#start/2","title":"Venomous.Application.start/2","type":"function"},{"doc":"A module to handle arguments for a Python function call.\n\nThis module defines a struct for storing the module name, function name,\nand the list of arguments that can be used to call a Python function.","ref":"Venomous.SnakeArgs.html","title":"Venomous.SnakeArgs","type":"module"},{"doc":"Builds SnakeArgs struct from params","ref":"Venomous.SnakeArgs.html#from_params/3","title":"Venomous.SnakeArgs.from_params/3","type":"function"},{"doc":"- module atom() of python module ex. :builtins\n  - function atom() of function from given module ex. :sum\n  - args list(any()) list of arguments for function ex. [ [1,2,3,4,5] ]","ref":"Venomous.SnakeArgs.html#from_params/3-parameters","title":"Parameters - Venomous.SnakeArgs.from_params/3","type":"function"},{"doc":"%SnakeArgs{}","ref":"Venomous.SnakeArgs.html#from_params/3-returns","title":"Returns - Venomous.SnakeArgs.from_params/3","type":"function"},{"doc":"","ref":"Venomous.SnakeArgs.html#t:t/0","title":"Venomous.SnakeArgs.t/0","type":"type"},{"doc":"A module to handle errors raised during Python function calls.\n\nThis module defines a struct for storing exception information,\nincluding the exception itself, the error message, and the backtrace.","ref":"Venomous.SnakeError.html","title":"Venomous.SnakeError","type":"module"},{"doc":"","ref":"Venomous.SnakeError.html#t:t/0","title":"Venomous.SnakeError.t/0","type":"type"},{"doc":"Manager for brave üêç workers\n\nThis module manages the snake workers, ensuring that inactive workers are cleaned up periodically.\n  \nMain call `:get_ready_snake` retrieves/spawns a `Venomous.SnakeWorker` with :busy/:spawned status.\nWorkers with status :ready, :spawned, are considered inactive and will be cleared up by main process loop running `:clean_inactive_workers` if they exceed their given TTL","ref":"Venomous.SnakeManager.html","title":"Venomous.SnakeManager","type":"module"},{"doc":"The following configurations are retrieved from `Application.get_env/3`:\n\n- `erlport_encoder: %{module: atom(), func: atom(), args: list(any())}`: Optional :erlport encoder/decoder python function for converting types.\n- `snake_ttl_minutes: non_neg_integer()`: Time-to-live for a Snake in minutes. Default is 15 min.\n- `perpetual_workers: non_neg_integer()`: Number of Snakes to keep alive perpetually. Default is 10.\n- `cleaner_interval_ms: non_neg_integer()`: Interval in milliseconds for cleaning up inactive Snakes. Default is 60_000 ms.\n\nDefaults are provided in case these configurations are not set:\n\n- Default encoder: none.\n- Default time-to-live for a worker: 15 minutes.\n- Default number of perpetual workers: 10.\n- Default interval for cleaning inactive workers: 60,000 milliseconds.","ref":"Venomous.SnakeManager.html#module-configuration","title":"Configuration - Venomous.SnakeManager","type":"module"},{"doc":"Returns a specification to start this module under a supervisor.\n\nSee `Supervisor`.","ref":"Venomous.SnakeManager.html#child_spec/1","title":"Venomous.SnakeManager.child_spec/1","type":"function"},{"doc":"","ref":"Venomous.SnakeManager.html#get_snake_worker_status/2","title":"Venomous.SnakeManager.get_snake_worker_status/2","type":"function"},{"doc":"","ref":"Venomous.SnakeManager.html#handle_continue/2","title":"Venomous.SnakeManager.handle_continue/2","type":"function"},{"doc":"","ref":"Venomous.SnakeManager.html#init/1","title":"Venomous.SnakeManager.init/1","type":"function"},{"doc":"","ref":"Venomous.SnakeManager.html#start_link/1","title":"Venomous.SnakeManager.start_link/1","type":"function"},{"doc":"DynamicSupervisor for Snakes\nThe maximum cap of `Venomous.SnakeWorker` is defined with :max_children option\n> #### Warning {: .warning}\n>\n> The maximum amount of python processes is capped at your systems maximum number of open file-descriptors\n> `ulimit -n` to check your limit","ref":"Venomous.SnakeSupervisor.html","title":"Venomous.SnakeSupervisor","type":"module"},{"doc":"Returns a specification to start this module under a supervisor.\n\nSee `Supervisor`.","ref":"Venomous.SnakeSupervisor.html#child_spec/1","title":"Venomous.SnakeSupervisor.child_spec/1","type":"function"},{"doc":"Deploys snake with given opts Map containing :erlport encoder/decoder module, func and args","ref":"Venomous.SnakeSupervisor.html#deploy_snake_worker/1","title":"Venomous.SnakeSupervisor.deploy_snake_worker/1","type":"function"},{"doc":"","ref":"Venomous.SnakeSupervisor.html#init/1","title":"Venomous.SnakeSupervisor.init/1","type":"function"},{"doc":"","ref":"Venomous.SnakeSupervisor.html#start_link/1","title":"Venomous.SnakeSupervisor.start_link/1","type":"function"},{"doc":"üî®üêç\nA brave snake worker slithering across...\n\nThis module defines a GenServer that manages a snake worker, which interacts with a Python process to execute specified functions asynchronously.\nThe main :run_snake call, creates a `Task.async/1` which calls python and handles exceptions returning python result or an Error struct which gets sent with signal to the caller process. This `Task` gets awaited inside the :run cast(). The original call() returns :ok","ref":"Venomous.SnakeWorker.html","title":"Venomous.SnakeWorker","type":"module"},{"doc":"- Starts and initializes a Python process.\n- Executes Python functions with given arguments.\n- Handles the results of the Python function calls, including errors.\n- Returns the result with a signal to caller process","ref":"Venomous.SnakeWorker.html#module-features","title":"Features - Venomous.SnakeWorker","type":"module"},{"doc":"- On initialization, the worker starts a Python process.\n- If provided, the worker initializes an encoder by calling a specified Python function with arguments.\n- The worker can run Python functions on demand and return the results to the caller.","ref":"Venomous.SnakeWorker.html#module-process-lifecycle","title":"Process Lifecycle - Venomous.SnakeWorker","type":"module"},{"doc":"Returns a specification to start this module under a supervisor.\n\nSee `Supervisor`.","ref":"Venomous.SnakeWorker.html#child_spec/1","title":"Venomous.SnakeWorker.child_spec/1","type":"function"},{"doc":"","ref":"Venomous.SnakeWorker.html#handle_continue/2","title":"Venomous.SnakeWorker.handle_continue/2","type":"function"},{"doc":"","ref":"Venomous.SnakeWorker.html#init/1","title":"Venomous.SnakeWorker.init/1","type":"function"},{"doc":"","ref":"Venomous.SnakeWorker.html#start_link/1","title":"Venomous.SnakeWorker.start_link/1","type":"function"},{"doc":"# Venomous\n\nAn overcomplicated library for managing concurrent Python processes using Erlport","ref":"readme.html","title":"Venomous","type":"extras"},{"doc":"If [available in Hex](https://hex.pm/docs/publish), the package can be installed\nby adding `venomous` to your list of dependencies in `mix.exs`:\n\n```elixir\ndef deps do\n  [\n    {:venomous, \"~> 0.1.0\"}\n  ]\nend\n```\n\nDocumentation can be generated with [ExDoc](https://github.com/elixir-lang/ex_doc)\nand published on [HexDocs](https://hexdocs.pm). Once published, the docs can\nbe found at  .","ref":"readme.html#installation","title":"Installation - Venomous","type":"extras"}],"producer":{"name":"ex_doc","version":[48,46,51,52,46,48]}}